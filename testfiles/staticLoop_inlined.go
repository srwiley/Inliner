// This file is generated by inliner. DO NOT EDIT.
// Source file: staticLoop.go
package main

import ()

func runSingleLoopNotInlined() float64 {
	sum := 0.0
	for j := 0; j < 30; j++ {
		sum += float64(j*j/2 + j)
	}
	return sum
}

func runSingleLoop() float64 {
	sum := 0.0
	 /* for j_ := 0; j_ < 30; j_++ { /* unwound */ 
		sum += float64((0)*(0)/2 + (0))
		sum += float64((1)*(1)/2 + (1))
		sum += float64((2)*(2)/2 + (2))
		sum += float64((3)*(3)/2 + (3))
		sum += float64((4)*(4)/2 + (4))
		sum += float64((5)*(5)/2 + (5))
		sum += float64((6)*(6)/2 + (6))
		sum += float64((7)*(7)/2 + (7))
		sum += float64((8)*(8)/2 + (8))
		sum += float64((9)*(9)/2 + (9))
		sum += float64((10)*(10)/2 + (10))
		sum += float64((11)*(11)/2 + (11))
		sum += float64((12)*(12)/2 + (12))
		sum += float64((13)*(13)/2 + (13))
		sum += float64((14)*(14)/2 + (14))
		sum += float64((15)*(15)/2 + (15))
		sum += float64((16)*(16)/2 + (16))
		sum += float64((17)*(17)/2 + (17))
		sum += float64((18)*(18)/2 + (18))
		sum += float64((19)*(19)/2 + (19))
		sum += float64((20)*(20)/2 + (20))
		sum += float64((21)*(21)/2 + (21))
		sum += float64((22)*(22)/2 + (22))
		sum += float64((23)*(23)/2 + (23))
		sum += float64((24)*(24)/2 + (24))
		sum += float64((25)*(25)/2 + (25))
		sum += float64((26)*(26)/2 + (26))
		sum += float64((27)*(27)/2 + (27))
		sum += float64((28)*(28)/2 + (28))
		sum += float64((29)*(29)/2 + (29)) /* } */ 
	return sum
}

func runDoubleLoopAsserts() (sum float64) {
	 /* for j_ := 0; j_ < 5; j_++ { /* unwound */ 
		 /* for k_ := 0; k_ < 4; k_++ { /* unwound */ 
			if (0)%2 == 0 {
				sum += float64((0) * (0))
			}
			/* affirm_(sum < 9) /* inlined assert */
if (sum < 9)== false  { return } /* */
			if (1)%2 == 0 {
				sum += float64((0) * (1))
			}
			/* affirm_(sum < 9) /* inlined assert */
if (sum < 9)== false  { return } /* */
			if (2)%2 == 0 {
				sum += float64((0) * (2))
			}
			/* affirm_(sum < 9) /* inlined assert */
if (sum < 9)== false  { return } /* */
			if (3)%2 == 0 {
				sum += float64((0) * (3))
			}
			/* affirm_(sum < 9) /* inlined assert */
if (sum < 9)== false  { return } /* */ /* } */ 
		 /* for k_ := 0; k_ < 4; k_++ { /* unwound */ 
			if (0)%2 == 0 {
				sum += float64((1) * (0))
			}
			/* affirm_(sum < 9) /* inlined assert */
if (sum < 9)== false  { return } /* */
			if (1)%2 == 0 {
				sum += float64((1) * (1))
			}
			/* affirm_(sum < 9) /* inlined assert */
if (sum < 9)== false  { return } /* */
			if (2)%2 == 0 {
				sum += float64((1) * (2))
			}
			/* affirm_(sum < 9) /* inlined assert */
if (sum < 9)== false  { return } /* */
			if (3)%2 == 0 {
				sum += float64((1) * (3))
			}
			/* affirm_(sum < 9) /* inlined assert */
if (sum < 9)== false  { return } /* */ /* } */ 
		 /* for k_ := 0; k_ < 4; k_++ { /* unwound */ 
			if (0)%2 == 0 {
				sum += float64((2) * (0))
			}
			/* affirm_(sum < 9) /* inlined assert */
if (sum < 9)== false  { return } /* */
			if (1)%2 == 0 {
				sum += float64((2) * (1))
			}
			/* affirm_(sum < 9) /* inlined assert */
if (sum < 9)== false  { return } /* */
			if (2)%2 == 0 {
				sum += float64((2) * (2))
			}
			/* affirm_(sum < 9) /* inlined assert */
if (sum < 9)== false  { return } /* */
			if (3)%2 == 0 {
				sum += float64((2) * (3))
			}
			/* affirm_(sum < 9) /* inlined assert */
if (sum < 9)== false  { return } /* */ /* } */ 
		 /* for k_ := 0; k_ < 4; k_++ { /* unwound */ 
			if (0)%2 == 0 {
				sum += float64((3) * (0))
			}
			/* affirm_(sum < 9) /* inlined assert */
if (sum < 9)== false  { return } /* */
			if (1)%2 == 0 {
				sum += float64((3) * (1))
			}
			/* affirm_(sum < 9) /* inlined assert */
if (sum < 9)== false  { return } /* */
			if (2)%2 == 0 {
				sum += float64((3) * (2))
			}
			/* affirm_(sum < 9) /* inlined assert */
if (sum < 9)== false  { return } /* */
			if (3)%2 == 0 {
				sum += float64((3) * (3))
			}
			/* affirm_(sum < 9) /* inlined assert */
if (sum < 9)== false  { return } /* */ /* } */ 
		 /* for k_ := 0; k_ < 4; k_++ { /* unwound */ 
			if (0)%2 == 0 {
				sum += float64((4) * (0))
			}
			/* affirm_(sum < 9) /* inlined assert */
if (sum < 9)== false  { return } /* */
			if (1)%2 == 0 {
				sum += float64((4) * (1))
			}
			/* affirm_(sum < 9) /* inlined assert */
if (sum < 9)== false  { return } /* */
			if (2)%2 == 0 {
				sum += float64((4) * (2))
			}
			/* affirm_(sum < 9) /* inlined assert */
if (sum < 9)== false  { return } /* */
			if (3)%2 == 0 {
				sum += float64((4) * (3))
			}
			/* affirm_(sum < 9) /* inlined assert */
if (sum < 9)== false  { return } /* */ /* } */  /* } */ 
	return sum
}

func runDoubleLoopNotInlined() float64 {
	sum := 0.0
	for j := 0; j < 3; j++ {
		for k := 0; k < 4; k++ {
			//fmt.Println(j_, k_)
			if k%2 == 0 {
				sum += float64(j * k)
			}
		}
	}
	return sum
}

func runDoubleLoop() float64 {
	sum := 0.0
	 /* for j_ := 0; j_ < 3; j_++ { /* unwound */ 
		 /* for k_ := 0; k_ < 4; k_++ { /* unwound */ 
			//fmt.Println(j_, k_)
			if (0)%2 == 0 {
				sum += float64((0) * (0))
			}
			//fmt.Println(j_, k_)
			if (1)%2 == 0 {
				sum += float64((0) * (1))
			}
			//fmt.Println(j_, k_)
			if (2)%2 == 0 {
				sum += float64((0) * (2))
			}
			//fmt.Println(j_, k_)
			if (3)%2 == 0 {
				sum += float64((0) * (3))
			} /* } */ 
		 /* for k_ := 0; k_ < 4; k_++ { /* unwound */ 
			//fmt.Println(j_, k_)
			if (0)%2 == 0 {
				sum += float64((1) * (0))
			}
			//fmt.Println(j_, k_)
			if (1)%2 == 0 {
				sum += float64((1) * (1))
			}
			//fmt.Println(j_, k_)
			if (2)%2 == 0 {
				sum += float64((1) * (2))
			}
			//fmt.Println(j_, k_)
			if (3)%2 == 0 {
				sum += float64((1) * (3))
			} /* } */ 
		 /* for k_ := 0; k_ < 4; k_++ { /* unwound */ 
			//fmt.Println(j_, k_)
			if (0)%2 == 0 {
				sum += float64((2) * (0))
			}
			//fmt.Println(j_, k_)
			if (1)%2 == 0 {
				sum += float64((2) * (1))
			}
			//fmt.Println(j_, k_)
			if (2)%2 == 0 {
				sum += float64((2) * (2))
			}
			//fmt.Println(j_, k_)
			if (3)%2 == 0 {
				sum += float64((2) * (3))
			} /* } */  /* } */ 
	return sum
}
